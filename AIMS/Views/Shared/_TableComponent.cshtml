@model Tuple<List<string>, List<Dictionary<string, string>>>

<div id="table-container" class="table-container">
    <table class="asset-table">
        <thead>
            <tr>
                @foreach (var header in Model.Item1)
                {
                    <th scope="col">
                        <button id="sort-button-@header.Replace(" ", "-").ToLower()" class="sort-btn"
                            onclick="toggleSort(this)">
                            <span id="sort-text-@header.Replace(" ", "-").ToLower()" class="sort-text">@header</span>
                            <span id="sort-icon-@header.Replace(" ", "-").ToLower()" class="sort-icon">ðŸ”¼</span>
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody id="table-body">
            @if (Model.Item2.Count == 0)
            {
                <tr>
                    <td id="no-data-message" colspan="@Model.Item1.Count" style="text-align: center;">No data available</td>
                </tr>
            }
            else
            {
                @foreach (var row in Model.Item2)
                {
                    <tr>
                        @foreach (var header in Model.Item1)
                        {
                            <td>
                                @if (row.ContainsKey(header))
                                {
                                    @if (header == "Status")
                                    {
                                        <span class="status @row[header].ToLower().Replace(" ", "")">@row[header]</span>
                                    }
                                    else
                                    {
                                        @row[header]
                                    }
                                }
                                else
                                {
                                    @("-")
                                }
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>
    function toggleSort(button) {
        const icon = button.querySelector(".sort-icon");
        const column = button.closest("th").cellIndex;
        const table = document.querySelector("table");
        const tbody = table.querySelector(" tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));
        const visibleRows = rows.filter(row => row.style.display !== "none");

        const ascending = icon.textContent === "ðŸ”½";
        icon.textContent = ascending ? "ðŸ”¼" : "ðŸ”½";

        const sortedRows = visibleRows.slice().sort((rowA, rowB) => {
            const cellA = rowA.cells[column]?.textContent.trim() || "";
            const cellB = rowB.cells[column]?.textContent.trim() || "";

            return ascending
                ? cellA.localeCompare(cellB, undefined, { numeric: true })
                : cellB.localeCompare(cellA, undefined, { numeric: true });
        });

        const reordered = [];
        let sortIndex = 0;

        rows.forEach(row => {
            if (row.style.display === "none") {
                reordered.push(row);
            } else {
                reordered.push(sortedRows[sortIndex++]);
            }
        });

        reordered.forEach((row, index) => {
            row.classList.remove("even-row", "odd-row");
            tbody.appendChild(row);
        });

        const visibleSortedRows = reordered.filter(row => row.style.display !== "none");
        visibleSortedRows.forEach((row, index) => {
            row.classList.add(index % 2 === 0 ? "even-row" : "odd-row");
        });

    }

    function applyInitialRowStriping() {
        const rows = Array.from(document.querySelectorAll("#table-body tr"));
        let visibleIndex = 0;

        rows.forEach(row => {
            // Skip hidden rows
            if (row.style.display === "none") return;

            // Remove old classes
            row.classList.remove("even-row", "odd-row");

            // Add new class based on visible rows
            row.classList.add(visibleIndex % 2 === 0 ? "even-row" : "odd-row");
            visibleIndex++;
        });
    }
    document.addEventListener("DOMContentLoaded", applyInitialRowStriping);
</script>
