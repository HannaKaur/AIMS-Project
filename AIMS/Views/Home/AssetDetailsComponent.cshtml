@using System.Text.Json

@* ---------- Top-level partials (modals/forms) ---------- *@
@await Html.PartialAsync("_AssetAddForm")
@await Html.PartialAsync("_EditAssetForm")
@await Html.PartialAsync("_AddCategoryForm")

@* ---------- Per-view styles (make sure _Layout.cshtml has @RenderSection("Styles", required: false) inside <head>) ---------- *@
@section Styles {
  <link rel="stylesheet" href="~/css/AssetDetailsComponent.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetButton.css"          asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AddAssetForm.css"         asp-append-version="true" />
  <style>
    /* Small toolbar for the Manage Asset button */
    .asset-toolbar{
      display:flex;
      justify-content:flex-end;
      margin: 8px 0 6px;
    }

    /* Keep status header tidy if you ever add content back in */
    .asset-header-bar{
      display:flex;
      align-items:center;
      justify-content:space-between;
      gap:12px;
      white-space:nowrap;
    }

    /* Center actions column */
    .asset-table th.actions-col,
    .asset-table td.actions-col{
      text-align:center;
      width:10%;
    }
  </style>
}

@{
  // --------- View data with safe fallbacks ----------
  var category     = ViewData["Category"]?.ToString() ?? "Unknown";

  // If you still receive these from the controller, that's fine; we won't rely on their order for headers.
  var tableHeaders = ViewData["TableHeaders"] as List<string> ?? new List<string>();

  var filteredData = ViewData["FilteredData"] as List<Dictionary<string, string>> ?? new();
  var specsData    = ViewData["SpecsData"] as Dictionary<string, Dictionary<string, string>>
                     ?? new Dictionary<string, Dictionary<string, string>>();

  ViewData["Title"] = $"{category} Asset Details";
}

<script>
  // Expose specsData to JS (never null)
  const specsData = @Html.Raw(JsonSerializer.Serialize(specsData));
</script>

<h2 class="text-center my-4">@ViewData["Title"]</h2>

@if (filteredData.Any())
{
  <div class="asset-table-wrapper">
    <!-- Right-aligned toolbar that shares the table width -->
    <div class="asset-toolbar">
      @await Html.PartialAsync("_AssetButton")
      @* or your own button *@
      @* <button type="button" class="btn btn-sm btn-primary">Manage Asset</button> *@
    </div>

    <table class="asset-table">
      <colgroup>
        <col style="width:30%" />
        <col style="width:15%" />
        <col style="width:12%" />
        <col style="width:18%" />  @* Status *@
        <col style="width:10%" />  @* Actions *@
      </colgroup>

      <thead>
        <tr>
          <th>Asset Name</th>
          <th>Type</th>
          <th>Tag #</th>
          <th>
            <div class="asset-header-bar">
              <span>Status</span>
            </div>
          </th>
          <th class="actions-col">Actions</th>
        </tr>
      </thead>

      <tbody>
        @foreach (var row in filteredData)
        {
            var assetName = row.TryGetValue("Asset Name", out var _n) ? _n : "";
            var type      = row.TryGetValue("Type", out var _tY) ? _tY : "";
            var tag       = row.TryGetValue("Tag #", out var _t) ? _t : "";
            var status    = row.TryGetValue("Status", out var _s) ? _s : "";

            var statusKey = (status ?? "").Trim().ToLowerInvariant();
            var statusClass = statusKey switch
            {
              "available"         => "status-available",
              "assigned"          => "status-assigned",
              "marked for survey" => "status-marked-for-survey",
              "in repair"         => "status-in-repair",
              "surveyed"          => "status-surveyed",
              _                   => ""
            };

            <tr onclick='showPopup(@Html.Raw(JsonSerializer.Serialize(assetName)),
                                   @Html.Raw(JsonSerializer.Serialize(tag)), event)'>
              <td>@assetName</td>
              <td>@type</td>
              <td>@tag</td>
              <td><span class="status-badge @statusClass">@status</span></td>
              <td class="actions-col">
                <button type="button"
                        class="btn btn-sm btn-outline-secondary js-inline-edit"
                        aria-label="Edit @assetName"
                        title="Edit"
                        onclick="event.stopPropagation()">
                  ✏️ <span class="visually-hidden">Edit</span>
                </button>
              </td>
            </tr>
        }
      </tbody>
    </table>
  </div>
}
else
{
  <p class="text-center">No assets found for <strong>@category</strong>.</p>
}

<!-- Small info popup used by row click -->
<div id="popup" style="
  display:none;
  position:fixed;
  background:#fff;
  padding:12px 16px;
  border:1.5px solid #ccc;
  border-radius:10px;
  box-shadow:0 4px 12px rgba(0,0,0,0.15);
  font-size:0.85rem;
  max-width:220px;
  width:max-content;
  word-wrap:break-word;
  line-height:1.4;
  z-index:1000;">
  <!-- filled by JS -->
</div>

<script>
  function showPopup(assetName, tagNumber, event) {
    const popup = document.getElementById("popup");
    const rect  = event.target.getBoundingClientRect();
    popup.style.top  = (rect.top  + window.scrollY) + "px";
    popup.style.left = (rect.left + window.scrollX) + "px";

    popup.innerHTML =
      "<strong>Asset Name:</strong> " + assetName +
      "<br><strong>Tag Number:</strong> " + tagNumber + "<br>";

    if (specsData[tagNumber]) {
      for (const spec in specsData[tagNumber]) {
        popup.innerHTML += "<strong>" + spec + ":</strong> " + specsData[tagNumber][spec] + "<br>";
      }
    }

    popup.style.display = "block";
    event.stopPropagation(); // prevent auto-close from document listener
  }

  // Close popup when clicking elsewhere
  document.addEventListener("click", function (event) {
    const popup = document.getElementById("popup");
    if (popup.style.display === "block" && !popup.contains(event.target)) {
      popup.style.display = "none";
    }
  });
</script>

